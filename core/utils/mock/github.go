// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v39/github"
)

// MockGithubRepositoryClient is a mock of GithubRepositoryClient interface.
type MockGithubRepositoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubRepositoryClientMockRecorder
}

// MockGithubRepositoryClientMockRecorder is the mock recorder for MockGithubRepositoryClient.
type MockGithubRepositoryClientMockRecorder struct {
	mock *MockGithubRepositoryClient
}

// NewMockGithubRepositoryClient creates a new mock instance.
func NewMockGithubRepositoryClient(ctrl *gomock.Controller) *MockGithubRepositoryClient {
	mock := &MockGithubRepositoryClient{ctrl: ctrl}
	mock.recorder = &MockGithubRepositoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubRepositoryClient) EXPECT() *MockGithubRepositoryClientMockRecorder {
	return m.recorder
}

// GetLatestRelease mocks base method.
func (m *MockGithubRepositoryClient) GetLatestRelease(ctx context.Context, owner, repo string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease.
func (mr *MockGithubRepositoryClientMockRecorder) GetLatestRelease(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockGithubRepositoryClient)(nil).GetLatestRelease), ctx, owner, repo)
}

// GetReleaseByTag mocks base method.
func (m *MockGithubRepositoryClient) GetReleaseByTag(ctx context.Context, owner, repo, tag string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByTag", ctx, owner, repo, tag)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseByTag indicates an expected call of GetReleaseByTag.
func (mr *MockGithubRepositoryClientMockRecorder) GetReleaseByTag(ctx, owner, repo, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByTag", reflect.TypeOf((*MockGithubRepositoryClient)(nil).GetReleaseByTag), ctx, owner, repo, tag)
}
