// Code generated by MockGen. DO NOT EDIT.
// Source: processbar.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockprogressBar is a mock of progressBar interface.
type MockprogressBar struct {
	ctrl     *gomock.Controller
	recorder *MockprogressBarMockRecorder
}

// MockprogressBarMockRecorder is the mock recorder for MockprogressBar.
type MockprogressBarMockRecorder struct {
	mock *MockprogressBar
}

// NewMockprogressBar creates a new mock instance.
func NewMockprogressBar(ctrl *gomock.Controller) *MockprogressBar {
	mock := &MockprogressBar{ctrl: ctrl}
	mock.recorder = &MockprogressBarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprogressBar) EXPECT() *MockprogressBarMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockprogressBar) Add(num int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", num)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockprogressBarMockRecorder) Add(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockprogressBar)(nil).Add), num)
}

// Finish mocks base method.
func (m *MockprogressBar) Finish() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish")
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockprogressBarMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockprogressBar)(nil).Finish))
}
