// Code generated by MockGen. DO NOT EDIT.
// Source: cmdr.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/mrlyc/cmdr/core"
)

// MockCmdrSearcher is a mock of CmdrSearcher interface.
type MockCmdrSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockCmdrSearcherMockRecorder
}

// MockCmdrSearcherMockRecorder is the mock recorder for MockCmdrSearcher.
type MockCmdrSearcherMockRecorder struct {
	mock *MockCmdrSearcher
}

// NewMockCmdrSearcher creates a new mock instance.
func NewMockCmdrSearcher(ctrl *gomock.Controller) *MockCmdrSearcher {
	mock := &MockCmdrSearcher{ctrl: ctrl}
	mock.recorder = &MockCmdrSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdrSearcher) EXPECT() *MockCmdrSearcherMockRecorder {
	return m.recorder
}

// GetLatestAsset mocks base method.
func (m *MockCmdrSearcher) GetLatestAsset(ctx context.Context, releaseName, assetName string) (core.CmdrReleaseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAsset", ctx, releaseName, assetName)
	ret0, _ := ret[0].(core.CmdrReleaseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAsset indicates an expected call of GetLatestAsset.
func (mr *MockCmdrSearcherMockRecorder) GetLatestAsset(ctx, releaseName, assetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAsset", reflect.TypeOf((*MockCmdrSearcher)(nil).GetLatestAsset), ctx, releaseName, assetName)
}
