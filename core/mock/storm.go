// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asdine/storm/v3 (interfaces: Query)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	storm "github.com/asdine/storm/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Bucket mocks base method.
func (m *MockQuery) Bucket(arg0 string) storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", arg0)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockQueryMockRecorder) Bucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockQuery)(nil).Bucket), arg0)
}

// Count mocks base method.
func (m *MockQuery) Count(arg0 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockQueryMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQuery)(nil).Count), arg0)
}

// Delete mocks base method.
func (m *MockQuery) Delete(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuery)(nil).Delete), arg0)
}

// Each mocks base method.
func (m *MockQuery) Each(arg0 interface{}, arg1 func(interface{}) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Each", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Each indicates an expected call of Each.
func (mr *MockQueryMockRecorder) Each(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Each", reflect.TypeOf((*MockQuery)(nil).Each), arg0, arg1)
}

// Find mocks base method.
func (m *MockQuery) Find(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockQueryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockQuery)(nil).Find), arg0)
}

// First mocks base method.
func (m *MockQuery) First(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockQueryMockRecorder) First(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockQuery)(nil).First), arg0)
}

// Limit mocks base method.
func (m *MockQuery) Limit(arg0 int) storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockQueryMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQuery)(nil).Limit), arg0)
}

// OrderBy mocks base method.
func (m *MockQuery) OrderBy(arg0 ...string) storm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderBy", varargs...)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockQueryMockRecorder) OrderBy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockQuery)(nil).OrderBy), arg0...)
}

// Raw mocks base method.
func (m *MockQuery) Raw() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockQueryMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockQuery)(nil).Raw))
}

// RawEach mocks base method.
func (m *MockQuery) RawEach(arg0 func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawEach", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawEach indicates an expected call of RawEach.
func (mr *MockQueryMockRecorder) RawEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawEach", reflect.TypeOf((*MockQuery)(nil).RawEach), arg0)
}

// Reverse mocks base method.
func (m *MockQuery) Reverse() storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reverse")
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Reverse indicates an expected call of Reverse.
func (mr *MockQueryMockRecorder) Reverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockQuery)(nil).Reverse))
}

// Skip mocks base method.
func (m *MockQuery) Skip(arg0 int) storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", arg0)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Skip indicates an expected call of Skip.
func (mr *MockQueryMockRecorder) Skip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockQuery)(nil).Skip), arg0)
}
