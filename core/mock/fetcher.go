// Code generated by MockGen. DO NOT EDIT.
// Source: fetcher.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetcher) Fetch(name, version, uri, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", name, version, uri, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetcherMockRecorder) Fetch(name, version, uri, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetcher)(nil).Fetch), name, version, uri, dir)
}

// IsSupport mocks base method.
func (m *MockFetcher) IsSupport(uri string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupport", uri)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupport indicates an expected call of IsSupport.
func (mr *MockFetcherMockRecorder) IsSupport(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupport", reflect.TypeOf((*MockFetcher)(nil).IsSupport), uri)
}
