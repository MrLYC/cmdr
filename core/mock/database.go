// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	storm "github.com/asdine/storm/v3"
	index "github.com/asdine/storm/v3/index"
	q "github.com/asdine/storm/v3/q"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDatabase) All(to interface{}, options ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{to}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "All", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockDatabaseMockRecorder) All(to interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{to}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDatabase)(nil).All), varargs...)
}

// AllByIndex mocks base method.
func (m *MockDatabase) AllByIndex(fieldName string, to interface{}, options ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fieldName, to}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllByIndex", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllByIndex indicates an expected call of AllByIndex.
func (mr *MockDatabaseMockRecorder) AllByIndex(fieldName, to interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fieldName, to}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByIndex", reflect.TypeOf((*MockDatabase)(nil).AllByIndex), varargs...)
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Count mocks base method.
func (m *MockDatabase) Count(data interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDatabaseMockRecorder) Count(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDatabase)(nil).Count), data)
}

// DeleteStruct mocks base method.
func (m *MockDatabase) DeleteStruct(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStruct", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStruct indicates an expected call of DeleteStruct.
func (mr *MockDatabaseMockRecorder) DeleteStruct(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStruct", reflect.TypeOf((*MockDatabase)(nil).DeleteStruct), data)
}

// Drop mocks base method.
func (m *MockDatabase) Drop(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockDatabaseMockRecorder) Drop(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockDatabase)(nil).Drop), data)
}

// Find mocks base method.
func (m *MockDatabase) Find(fieldName string, value, to interface{}, options ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fieldName, value, to}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockDatabaseMockRecorder) Find(fieldName, value, to interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fieldName, value, to}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDatabase)(nil).Find), varargs...)
}

// Init mocks base method.
func (m *MockDatabase) Init(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDatabaseMockRecorder) Init(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDatabase)(nil).Init), data)
}

// One mocks base method.
func (m *MockDatabase) One(fieldName string, value, to interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", fieldName, value, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One.
func (mr *MockDatabaseMockRecorder) One(fieldName, value, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockDatabase)(nil).One), fieldName, value, to)
}

// Prefix mocks base method.
func (m *MockDatabase) Prefix(fieldName, prefix string, to interface{}, options ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fieldName, prefix, to}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prefix", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockDatabaseMockRecorder) Prefix(fieldName, prefix, to interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fieldName, prefix, to}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockDatabase)(nil).Prefix), varargs...)
}

// Range mocks base method.
func (m *MockDatabase) Range(fieldName string, min, max, to interface{}, options ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fieldName, min, max, to}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Range", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Range indicates an expected call of Range.
func (mr *MockDatabaseMockRecorder) Range(fieldName, min, max, to interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fieldName, min, max, to}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockDatabase)(nil).Range), varargs...)
}

// ReIndex mocks base method.
func (m *MockDatabase) ReIndex(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReIndex", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReIndex indicates an expected call of ReIndex.
func (mr *MockDatabaseMockRecorder) ReIndex(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReIndex", reflect.TypeOf((*MockDatabase)(nil).ReIndex), data)
}

// Save mocks base method.
func (m *MockDatabase) Save(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDatabaseMockRecorder) Save(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDatabase)(nil).Save), data)
}

// Select mocks base method.
func (m *MockDatabase) Select(matchers ...q.Matcher) storm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range matchers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDatabaseMockRecorder) Select(matchers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabase)(nil).Select), matchers...)
}

// Update mocks base method.
func (m *MockDatabase) Update(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseMockRecorder) Update(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabase)(nil).Update), data)
}

// UpdateField mocks base method.
func (m *MockDatabase) UpdateField(data interface{}, fieldName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateField", data, fieldName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateField indicates an expected call of UpdateField.
func (mr *MockDatabaseMockRecorder) UpdateField(data, fieldName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateField", reflect.TypeOf((*MockDatabase)(nil).UpdateField), data, fieldName, value)
}
