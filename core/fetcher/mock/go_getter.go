// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/go-getter (interfaces: Detector,ProgressTracker)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDetector is a mock of Detector interface.
type MockDetector struct {
	ctrl     *gomock.Controller
	recorder *MockDetectorMockRecorder
}

// MockDetectorMockRecorder is the mock recorder for MockDetector.
type MockDetectorMockRecorder struct {
	mock *MockDetector
}

// NewMockDetector creates a new mock instance.
func NewMockDetector(ctrl *gomock.Controller) *MockDetector {
	mock := &MockDetector{ctrl: ctrl}
	mock.recorder = &MockDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetector) EXPECT() *MockDetectorMockRecorder {
	return m.recorder
}

// Detect mocks base method.
func (m *MockDetector) Detect(arg0, arg1 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Detect indicates an expected call of Detect.
func (mr *MockDetectorMockRecorder) Detect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockDetector)(nil).Detect), arg0, arg1)
}

// MockProgressTracker is a mock of ProgressTracker interface.
type MockProgressTracker struct {
	ctrl     *gomock.Controller
	recorder *MockProgressTrackerMockRecorder
}

// MockProgressTrackerMockRecorder is the mock recorder for MockProgressTracker.
type MockProgressTrackerMockRecorder struct {
	mock *MockProgressTracker
}

// NewMockProgressTracker creates a new mock instance.
func NewMockProgressTracker(ctrl *gomock.Controller) *MockProgressTracker {
	mock := &MockProgressTracker{ctrl: ctrl}
	mock.recorder = &MockProgressTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressTracker) EXPECT() *MockProgressTrackerMockRecorder {
	return m.recorder
}

// TrackProgress mocks base method.
func (m *MockProgressTracker) TrackProgress(arg0 string, arg1, arg2 int64, arg3 io.ReadCloser) io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackProgress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// TrackProgress indicates an expected call of TrackProgress.
func (mr *MockProgressTrackerMockRecorder) TrackProgress(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackProgress", reflect.TypeOf((*MockProgressTracker)(nil).TrackProgress), arg0, arg1, arg2, arg3)
}
