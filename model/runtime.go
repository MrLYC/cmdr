// Code generated by entc, DO NOT EDIT.

package model

import (
	"time"

	"github.com/google/uuid"
	"github.com/mrlyc/cmdr/model/command"
	"github.com/mrlyc/cmdr/model/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	commandFields := schema.Command{}.Fields()
	_ = commandFields
	// commandDescActivated is the schema descriptor for activated field.
	commandDescActivated := commandFields[0].Descriptor()
	// command.DefaultActivated holds the default value on creation for the activated field.
	command.DefaultActivated = commandDescActivated.Default.(bool)
	// commandDescName is the schema descriptor for name field.
	commandDescName := commandFields[1].Descriptor()
	// command.NameValidator is a validator for the "name" field. It is called by the builders before save.
	command.NameValidator = func() func(string) error {
		validators := commandDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commandDescVersion is the schema descriptor for version field.
	commandDescVersion := commandFields[2].Descriptor()
	// command.VersionValidator is a validator for the "version" field. It is called by the builders before save.
	command.VersionValidator = func() func(string) error {
		validators := commandDescVersion.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(version string) error {
			for _, fn := range fns {
				if err := fn(version); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commandDescLocation is the schema descriptor for location field.
	commandDescLocation := commandFields[3].Descriptor()
	// command.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	command.LocationValidator = func() func(string) error {
		validators := commandDescLocation.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(location string) error {
			for _, fn := range fns {
				if err := fn(location); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commandDescCreatedAt is the schema descriptor for created_at field.
	commandDescCreatedAt := commandFields[5].Descriptor()
	// command.DefaultCreatedAt holds the default value on creation for the created_at field.
	command.DefaultCreatedAt = commandDescCreatedAt.Default.(func() time.Time)
	// commandDescManaged is the schema descriptor for managed field.
	commandDescManaged := commandFields[6].Descriptor()
	// command.DefaultManaged holds the default value on creation for the managed field.
	command.DefaultManaged = commandDescManaged.Default.(bool)
	// commandDescID is the schema descriptor for id field.
	commandDescID := commandFields[4].Descriptor()
	// command.DefaultID holds the default value on creation for the id field.
	command.DefaultID = commandDescID.Default.(func() uuid.UUID)
}
