// Code generated by MockGen. DO NOT EDIT.
// Source: operator.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOperatorer is a mock of Operatorer interface.
type MockOperatorer struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorerMockRecorder
}

// MockOperatorerMockRecorder is the mock recorder for MockOperatorer.
type MockOperatorerMockRecorder struct {
	mock *MockOperatorer
}

// NewMockOperatorer creates a new mock instance.
func NewMockOperatorer(ctrl *gomock.Controller) *MockOperatorer {
	mock := &MockOperatorer{ctrl: ctrl}
	mock.recorder = &MockOperatorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorer) EXPECT() *MockOperatorerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockOperatorer) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockOperatorerMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockOperatorer)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockOperatorer) Rollback(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", ctx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockOperatorerMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockOperatorer)(nil).Rollback), ctx)
}

// Run mocks base method.
func (m *MockOperatorer) Run(ctx context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockOperatorerMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockOperatorer)(nil).Run), ctx)
}

// String mocks base method.
func (m *MockOperatorer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockOperatorerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockOperatorer)(nil).String))
}
