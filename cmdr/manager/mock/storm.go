// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asdine/storm/v3 (interfaces: TypeStore,Query)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	storm "github.com/asdine/storm/v3"
	index "github.com/asdine/storm/v3/index"
	q "github.com/asdine/storm/v3/q"
	gomock "github.com/golang/mock/gomock"
)

// MockTypeStore is a mock of TypeStore interface.
type MockTypeStore struct {
	ctrl     *gomock.Controller
	recorder *MockTypeStoreMockRecorder
}

// MockTypeStoreMockRecorder is the mock recorder for MockTypeStore.
type MockTypeStoreMockRecorder struct {
	mock *MockTypeStore
}

// NewMockTypeStore creates a new mock instance.
func NewMockTypeStore(ctrl *gomock.Controller) *MockTypeStore {
	mock := &MockTypeStore{ctrl: ctrl}
	mock.recorder = &MockTypeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeStore) EXPECT() *MockTypeStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockTypeStore) All(arg0 interface{}, arg1 ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "All", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockTypeStoreMockRecorder) All(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockTypeStore)(nil).All), varargs...)
}

// AllByIndex mocks base method.
func (m *MockTypeStore) AllByIndex(arg0 string, arg1 interface{}, arg2 ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllByIndex", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllByIndex indicates an expected call of AllByIndex.
func (mr *MockTypeStoreMockRecorder) AllByIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByIndex", reflect.TypeOf((*MockTypeStore)(nil).AllByIndex), varargs...)
}

// Count mocks base method.
func (m *MockTypeStore) Count(arg0 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTypeStoreMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTypeStore)(nil).Count), arg0)
}

// DeleteStruct mocks base method.
func (m *MockTypeStore) DeleteStruct(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStruct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStruct indicates an expected call of DeleteStruct.
func (mr *MockTypeStoreMockRecorder) DeleteStruct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStruct", reflect.TypeOf((*MockTypeStore)(nil).DeleteStruct), arg0)
}

// Drop mocks base method.
func (m *MockTypeStore) Drop(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockTypeStoreMockRecorder) Drop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockTypeStore)(nil).Drop), arg0)
}

// Find mocks base method.
func (m *MockTypeStore) Find(arg0 string, arg1, arg2 interface{}, arg3 ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockTypeStoreMockRecorder) Find(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTypeStore)(nil).Find), varargs...)
}

// Init mocks base method.
func (m *MockTypeStore) Init(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTypeStoreMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTypeStore)(nil).Init), arg0)
}

// One mocks base method.
func (m *MockTypeStore) One(arg0 string, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One.
func (mr *MockTypeStoreMockRecorder) One(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockTypeStore)(nil).One), arg0, arg1, arg2)
}

// Prefix mocks base method.
func (m *MockTypeStore) Prefix(arg0, arg1 string, arg2 interface{}, arg3 ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prefix", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockTypeStoreMockRecorder) Prefix(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockTypeStore)(nil).Prefix), varargs...)
}

// Range mocks base method.
func (m *MockTypeStore) Range(arg0 string, arg1, arg2, arg3 interface{}, arg4 ...func(*index.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Range", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Range indicates an expected call of Range.
func (mr *MockTypeStoreMockRecorder) Range(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockTypeStore)(nil).Range), varargs...)
}

// ReIndex mocks base method.
func (m *MockTypeStore) ReIndex(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReIndex indicates an expected call of ReIndex.
func (mr *MockTypeStoreMockRecorder) ReIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReIndex", reflect.TypeOf((*MockTypeStore)(nil).ReIndex), arg0)
}

// Save mocks base method.
func (m *MockTypeStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTypeStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTypeStore)(nil).Save), arg0)
}

// Select mocks base method.
func (m *MockTypeStore) Select(arg0 ...q.Matcher) storm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockTypeStoreMockRecorder) Select(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTypeStore)(nil).Select), arg0...)
}

// Update mocks base method.
func (m *MockTypeStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTypeStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTypeStore)(nil).Update), arg0)
}

// UpdateField mocks base method.
func (m *MockTypeStore) UpdateField(arg0 interface{}, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateField", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateField indicates an expected call of UpdateField.
func (mr *MockTypeStoreMockRecorder) UpdateField(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateField", reflect.TypeOf((*MockTypeStore)(nil).UpdateField), arg0, arg1, arg2)
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Bucket mocks base method.
func (m *MockQuery) Bucket(arg0 string) storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", arg0)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Bucket indicates an expected call of Bucket.
func (mr *MockQueryMockRecorder) Bucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockQuery)(nil).Bucket), arg0)
}

// Count mocks base method.
func (m *MockQuery) Count(arg0 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockQueryMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQuery)(nil).Count), arg0)
}

// Delete mocks base method.
func (m *MockQuery) Delete(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuery)(nil).Delete), arg0)
}

// Each mocks base method.
func (m *MockQuery) Each(arg0 interface{}, arg1 func(interface{}) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Each", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Each indicates an expected call of Each.
func (mr *MockQueryMockRecorder) Each(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Each", reflect.TypeOf((*MockQuery)(nil).Each), arg0, arg1)
}

// Find mocks base method.
func (m *MockQuery) Find(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockQueryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockQuery)(nil).Find), arg0)
}

// First mocks base method.
func (m *MockQuery) First(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockQueryMockRecorder) First(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockQuery)(nil).First), arg0)
}

// Limit mocks base method.
func (m *MockQuery) Limit(arg0 int) storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockQueryMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQuery)(nil).Limit), arg0)
}

// OrderBy mocks base method.
func (m *MockQuery) OrderBy(arg0 ...string) storm.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderBy", varargs...)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockQueryMockRecorder) OrderBy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockQuery)(nil).OrderBy), arg0...)
}

// Raw mocks base method.
func (m *MockQuery) Raw() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockQueryMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockQuery)(nil).Raw))
}

// RawEach mocks base method.
func (m *MockQuery) RawEach(arg0 func([]byte, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawEach", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawEach indicates an expected call of RawEach.
func (mr *MockQueryMockRecorder) RawEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawEach", reflect.TypeOf((*MockQuery)(nil).RawEach), arg0)
}

// Reverse mocks base method.
func (m *MockQuery) Reverse() storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reverse")
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Reverse indicates an expected call of Reverse.
func (mr *MockQueryMockRecorder) Reverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockQuery)(nil).Reverse))
}

// Skip mocks base method.
func (m *MockQuery) Skip(arg0 int) storm.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", arg0)
	ret0, _ := ret[0].(storm.Query)
	return ret0
}

// Skip indicates an expected call of Skip.
func (mr *MockQueryMockRecorder) Skip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockQuery)(nil).Skip), arg0)
}
